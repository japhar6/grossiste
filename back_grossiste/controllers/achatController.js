const Achat = require("../models/Achats");
const Produit = require("../models/Produits");
const Fournisseur = require("../models/Fournisseurs");
const Panier = require("../models/Paniers");
const { ajouterOuMettreAJourStock } = require('./stockController'); 
const Stock = require('../models/Stock');
const Entrepot = require('../models/Entrepot');


// Ajouter un achat
exports.ajouterAchat = async (req, res) => {
  try {
      const { produit, fournisseur, quantite, prixAchat } = req.body;

      // V√©rification des champs obligatoires
      if (!produit || !fournisseur || !quantite || !prixAchat) {
          return res.status(400).json({ message: "Tous les champs obligatoires doivent √™tre remplis." });
      }

      // V√©rifier si le produit et le fournisseur existent
      const produitExistant = await Produit.findById(produit);
      if (!produitExistant) {
          return res.status(404).json({ message: "Produit non trouv√©" });
      }

      const fournisseurExistant = await Fournisseur.findById(fournisseur);
      if (!fournisseurExistant) {
          return res.status(404).json({ message: "Fournisseur non trouv√©" });
      }

      // üîπ Trouver ou cr√©er un panier
      let panierExistant = await Panier.findOne();
      if (!panierExistant) {
          panierExistant = new Panier({
              achats: [],
              totalGeneral: 0
          });
          await panierExistant.save();
      }

      // Calculer le total de l'achat
      const total = quantite * prixAchat;

      // Cr√©ation de l'achat
      const nouvelAchat = new Achat({
          produit,
          fournisseur,
          quantite,
          prixAchat,
          total,
          panier: panierExistant._id  // Lier l'achat au panier
      });

      await nouvelAchat.save();

      // Ajouter l'achat au panier et mettre √† jour le total g√©n√©ral du panier
      panierExistant.achats.push(nouvelAchat._id);
      panierExistant.totalGeneral += total;
      await panierExistant.save();

      res.status(201).json({ message: "‚úÖ Achat ajout√© avec succ√®s", achat: nouvelAchat, panier: panierExistant });
  } catch (error) {
      console.error("‚ùå Erreur lors de l'ajout de l'achat:", error);
      res.status(500).json({ message: "Erreur lors de l'ajout de l'achat", error: error.message });
  }
};


exports.validerAchat = async (req, res) => {
  try {
    const { achatId } = req.params;
    const { entrepotId } = req.body;

    console.log("üîç Validation de l'achat - ID:", achatId, "Entrep√¥t:", entrepotId);

    const achat = await Achat.findById(achatId).populate('produit');
    if (!achat) {
      return res.status(404).json({ message: "Achat non trouv√©" });
    }

    const entrepot = await Entrepot.findById(entrepotId);
    if (!entrepot) {
      return res.status(404).json({ message: "Entrep√¥t non trouv√©" });
    }

    // üìå Utilisation de la fonction sans res
    const stock = await ajouterOuMettreAJourStock(entrepotId, achat.produit._id, achat.quantite, achat.prixAchat);

    res.status(200).json({ message: "Stock mis √† jour apr√®s validation de l'achat", stock });

  } catch (error) {
    console.error("‚ùå Erreur lors de la validation de l'achat:", error);
    res.status(500).json({ message: "Erreur lors de la validation de l'achat", error: error.message });
  }
};


// Afficher tous les achats
exports.afficherAchats = async (req, res) => {
    try {
        const achats = await Achat.find().populate("produit fournisseur");
        res.status(200).json(achats);
    } catch (error) {
        res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des achats", error });
    }
};

// Modifier un achat
exports.modifierAchat = async (req, res) => {
    try {
        const { id } = req.params; // R√©cup√©rer l'ID de l'achat √† modifier
        const { produit, fournisseur, quantite, prixAchat } = req.body; // R√©cup√©rer les nouvelles valeurs de la requ√™te

        // V√©rification des champs requis
        if (!produit || !fournisseur || !quantite || !prixAchat) {
            return res.status(400).json({ message: "Tous les champs obligatoires doivent √™tre remplis." });
        }

        // V√©rifier que l'achat existe
        const achatExistant = await Achat.findById(id);
        if (!achatExistant) {
            return res.status(404).json({ message: "Achat non trouv√©" });
        }

        // V√©rification que le produit et le fournisseur existent
        const produitExistant = await Produit.findById(produit);
        if (!produitExistant) {
            return res.status(404).json({ message: "Produit non trouv√©" });
        }

        const fournisseurExistant = await Fournisseur.findById(fournisseur);
        if (!fournisseurExistant) {
            return res.status(404).json({ message: "Fournisseur non trouv√©" });
        }

        // Calcul du total avec les nouvelles valeurs
        const total = quantite * prixAchat;

        // Mise √† jour de l'achat
        const achatModifie = await Achat.findByIdAndUpdate(
            id, // L'ID de l'achat √† modifier
            { produit, fournisseur, quantite, prixAchat, total }, // Les nouvelles donn√©es
            { new: true } // Retourne l'achat modifi√©
        );

        res.status(200).json({ message: "Achat modifi√© avec succ√®s", achat: achatModifie });
    } catch (error) {
        console.error("Erreur lors de la modification de l'achat:", error);
        res.status(500).json({ message: "Erreur lors de la modification de l'achat", error: error.message });
    }
};

// Supprimer un achat
exports.supprimerAchat = async (req, res) => {
    try {
        const { id } = req.params; // R√©cup√©rer l'ID de l'achat √† supprimer

        // V√©rifier que l'achat existe
        const achatExistant = await Achat.findById(id);
        if (!achatExistant) {
            return res.status(404).json({ message: "Achat non trouv√©" });
        }

        // Supprimer l'achat
        await Achat.findByIdAndDelete(id);

        // Retourner une r√©ponse de succ√®s
        res.status(200).json({ message: "Achat supprim√© avec succ√®s" });
    } catch (error) {
        console.error("Erreur lors de la suppression de l'achat:", error);
        res.status(500).json({ message: "Erreur lors de la suppression de l'achat", error: error.message });
    }
};

